{"version":3,"sources":["logo.svg","components/Footer.js","components/Rules.js","components/GameArea.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","rule","activeCard","isNot","score","prevScore","highScore","localStorage","getItem","className","text","Rules","obj","preferredName","firstName","lastName","division","jobTitle","activeCards","lastNames","map","card","sort","GameArea","cards","clickHandler","index","onClick","key","src","process","photoUrl","alt","displayName","shuffle","array","t","i","m","length","Math","floor","random","GameContainer","props","console","log","isCorrect","state","currentRule","changeRule","setItem","max","setState","numRules","min","possibleCards","slice","bind","selectedSource","fetch","this","then","response","json","entity","setupGame","Fragment","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c84f20bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Footer = ({rule, activeCard, isNot, score, prevScore}) =>{\n    const highScore = localStorage.getItem('highScore') || false;\n    return(\n        <div className={'footer'}>\n            <div>\n                {rule.text(activeCard, isNot)}\n            </div>\n            <div>\n                Current Score: {score}\n            </div>\n            {prevScore &&\n                <div>\n                    Previous Score: {prevScore}\n                </div>\n            }\n            {highScore &&\n                <div>\n                    High Score: {highScore}\n                </div>\n            }\n\n\n        </div>\n    )\n}\n\nexport default Footer\n","const Rules =[\n    {\n        text:(obj, isNot) =>{return `Click on ${isNot ? 'not' : ''} ${obj.preferredName || obj.firstName}`},\n        rule: (obj, activeCard)=>{\n            return (obj.preferredName || obj.firstName) === (activeCard.preferredName || activeCard.firstName)\n        }\n    },\n    {\n        text:(obj, isNot) =>{return `Click on ${isNot ? 'not' : ''} last name of ${obj.lastName}`},\n        rule: (obj, activeCard)=>{\n            return obj.lastName === activeCard.lastName\n        }\n    },\n    {\n        text:(obj, isNot) =>{return `Click on ${isNot ? 'not' : ''} ${obj.division}`},\n        rule: (obj, activeCard)=>{\n            return obj.division === activeCard.division\n        }\n    },\n    {\n        text:(obj, isNot) =>{return `Click on ${isNot ? 'not' : ''} ${obj.jobTitle}`},\n        rule: (obj, activeCard)=>{\n            return obj.jobTitle === activeCard.jobTitle\n        }\n    },\n\n    {\n        text:(obj, isNot) =>{return `${isNot ? 'Not first' : 'First'} alphabetically by last name`},\n        rule: (obj, activeCard, activeCards)=>{\n            let lastNames = activeCards.map((card)=>{return card.lastName });\n            lastNames.sort();\n            return obj.lastName === lastNames[0];\n\n        }\n    },\n\n\n\n\n];\n\nexport default  Rules;\n","import React from 'react';\n\nconst GameArea = ({cards, clickHandler}) =>{\n\n    return cards.map((card, index)=>{\n    return (\n        <span onClick={() => clickHandler(card)} key={index}>\n            <img src={process.env.PUBLIC_URL + '/' + card.photoUrl } alt={card.displayName}/>\n        </span>\n)\n    })\n}\n\nexport default GameArea\n","\nimport React from 'react';\nimport Footer from \"./Footer\";\nimport Rules from \"./Rules\"\nimport GameArea from \"./GameArea\";\n\n\n\nclass GameContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.clickHandler = this.clickHandler.bind(this);\n        this.state  = {\n            selectedSource:'fearless',\n            currentRule:Rules[0],\n            isNot:false,\n            score:0,\n\n        }\n    }\n\n    setupGame() {\n        fetch(process.env.PUBLIC_URL + `/${this.state.selectedSource}.json`)\n            .then(response => {\n                return response.json();\n            })\n            .then(entity => {\n                let possibleCards = entity.cards;\n\n                shuffle(possibleCards);\n\n                this.setState({\n                    cards: possibleCards,\n                    activeCard:possibleCards[0],\n                    activeCards:possibleCards.slice(0, 4)\n                });\n            });\n    }\n    componentDidMount() {\n        this.setupGame();\n    }\n\n    clickHandler = (obj) =>{\n        console.log(obj.preferredName || obj.firstName);\n        let isCorrect = this.state.currentRule.rule(\n            obj,\n            this.state.activeCard,\n            this.state.activeCards\n        );\n        if (this.state.isNot){\n            isCorrect = !isCorrect\n        }\n        let score = 0;\n        if (isCorrect){\n            score = this.state.score + 1\n\n        }\n        this.changeRule(score)\n    };\n\n    changeRule = (score) =>{\n\n        if (score === 0){\n            const prevScore = this.state.score;\n            console.log('HIGH SCORE:' + localStorage.getItem('highScore'));\n\n            localStorage.setItem('highScore', Math.max(\n                prevScore,\n                localStorage.getItem('highScore') || 0\n            ));\n\n            this.setState({prevScore});\n        }\n        const numRules = Math.min(Rules.length, Math.floor(this.state.score/5));\n        let currentRule = Rules[Math.floor(Math.random() * numRules)];\n        //let currentRule = Rules[4];\n        let possibleCards = this.state.cards;\n        shuffle(possibleCards);\n        let activeCard = possibleCards[0];\n        let activeCards = possibleCards.slice(0,Math.floor(this.state.score/4) + 4);\n        shuffle(activeCards);\n        let isNot = (Math.floor(Math.random() * 10) % 2 === 0);\n        console.log(isNot);\n        this.setState({score, currentRule, possibleCards, activeCard, activeCards, isNot})\n    };\n\n    render() {\n\n        return (\n            this.state.cards ?\n                <React.Fragment>\n                    <div className={'header'}>Fear Not!</div>\n                    <GameArea cards={this.state.activeCards} clickHandler={this.clickHandler}/>\n                    <Footer\n                        rule={this.state.currentRule}\n                        isNot={this.state.isNot}\n                        activeCard={this.state.activeCard}\n                        score={this.state.score}\n                        prevScore={this.state.prevScore}\n                    />\n                </React.Fragment>\n                :\n                <div>Loading</div>\n\n        )\n    }\n}\n\nfunction shuffle(array) {\n    let m = array.length,\n        t,\n        i;\n    while (m) {\n        i = Math.floor(Math.random() * m--);\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n}\n\nexport default GameContainer\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameContainer from \"./components/GameContainer\";\n\nfunction App() {\n  return (\n    <GameContainer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}